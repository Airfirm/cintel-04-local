[{"name": "app.py", "content": "import palmerpenguins\nimport plotly.express as px\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom shiny.express import input, render, ui\nfrom shiny import render\nfrom shinywidgets import render_plotly\nfrom shiny import reactive\n\npenguins_df = palmerpenguins.load_penguins()\n\nui.page_opts(title=\"Penguin Exploratory Data Analysis - Femi\", fillable=True)\n\n# Sidebar\nwith ui.sidebar(open=\"open\"):\n    ui.h2(\"Sidebar\")\n    ui.input_selectize(\n        \"selected_attribute\",\n        \"Select Plotly Attribute\",\n        [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"]\n    )\n    ui.input_numeric(\"plotly_bin_count\", \"Plotly Histogram Bin Count\", 20)\n    ui.input_slider(\"seaborn_bin_count\", \"Seaborn Bin Count\", 5, 100, 20)\n    ui.input_checkbox_group(\n        \"selected_species_list\",\n        \"Filter by Species\",\n        [\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n        selected=[\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n        inline=True\n    )\n    ui.input_checkbox_group(\n        \"selected_island_list\",\n        \"Filter by Island\",\n        [\"Torgersen\", \"Dream\", \"Biscoe\"],\n        selected=[\"Torgersen\", \"Dream\", \"Biscoe\"],\n        inline=True\n    )\n\n    ui.hr()\n    ui.a(\"GitHub Repo URL\", href=\"https://github.com/Airfirm/cintel-04-local\", target=\"_blank\")\n\n# Reactive calculations and effects\n    @reactive.calc\n    def filtered_data():\n        df = penguins_df\n        df = df[df[\"species\"].isin(input.selected_species_list())]\n        df = df[df[\"island\"].isin(input.selected_island_list())]\n        return df\n        \n# Main layout - Data Table and Data Grid\nwith ui.layout_columns():\n    with ui.card(full_screen=True):\n        ui.h2(\"Penguin Data Table\")\n        @render.data_frame\n        def penguins_datatable():\n            return render.DataTable(filtered_data())\n\n    with ui.card(full_screen=True):\n        ui.h2(\"Penguin Data Grid\")\n        @render.data_frame\n        def penguins_datagrid():\n            return render.DataGrid(filtered_data())\n\n# Main layout - Histograms and Scatterplot\nwith ui.layout_columns():\n    @render_plotly\n    def plot1():\n        return px.histogram(\n            filtered_data(),\n            x=input.selected_attribute(),\n            color=\"species\",\n            nbins=input.plotly_bin_count(),\n            title=f\"Histogram of {input.selected_attribute()} by Species\",\n            labels={input.selected_attribute(): input.selected_attribute().replace('_', ' ').title()}\n    )\n\n    @render.plot(alt=\"Seaborn Histogram\")\n    def seaborn_hist():\n        data = filtered_data()\n        bins = input.seaborn_bin_count()\n        attr = input.selected_attribute()\n\n        for species in data[\"species\"].unique():\n            species_data = data[data[\"species\"] == species]\n            plt.hist(\n                species_data[attr],\n                bins=bins,\n                alpha=0.5,\n                label=species,\n                density=True\n    )\n        plt.title(f\"Seaborn Histogram of {attr.replace('_', ' ').title()} by Species\")\n        plt.xlabel(attr.replace('_', ' ').title())\n        plt.ylabel(\"Density\")\n        plt.legend()\n        return plt.gcf()\n\nwith ui.card(full_screen=True):\n    ui.card_header(\"Plotly Scatterplot: Species\")\n\n    @render_plotly\n    def plotly_scatterplot():\n        return px.scatter(\n            filtered_data(),\n            x=\"bill_length_mm\",\n            y=input.selected_attribute(),  # dynamic Y-axis\n            color=\"species\",\n            title=f\"Scatterplot of Bill Length vs {input.selected_attribute().replace('_', ' ').title()}\",\n            labels={\n                \"bill_length_mm\": \"Bill Length (mm)\",\n                input.selected_attribute(): input.selected_attribute().replace('_', ' ').title()\n        },\n            size_max=8\n    )\n", "type": "text"}]